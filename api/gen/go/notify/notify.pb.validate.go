// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: notify/notify.proto

package notifyv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MailNotify with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MailNotify) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MailNotify with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MailNotifyMultiError, or
// nil if none found.
func (m *MailNotify) ValidateAll() error {
	return m.validate(true)
}

func (m *MailNotify) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetSubject()) < 1 {
		err := MailNotifyValidationError{
			field:  "Subject",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetBody()) < 1 {
		err := MailNotifyValidationError{
			field:  "Body",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MailNotifyMultiError(errors)
	}

	return nil
}

// MailNotifyMultiError is an error wrapping multiple validation errors
// returned by MailNotify.ValidateAll() if the designated constraints aren't met.
type MailNotifyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MailNotifyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MailNotifyMultiError) AllErrors() []error { return m }

// MailNotifyValidationError is the validation error returned by
// MailNotify.Validate if the designated constraints aren't met.
type MailNotifyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MailNotifyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MailNotifyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MailNotifyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MailNotifyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MailNotifyValidationError) ErrorName() string { return "MailNotifyValidationError" }

// Error satisfies the builtin error interface
func (e MailNotifyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMailNotify.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MailNotifyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MailNotifyValidationError{}

// Validate checks the field values on PhoneNotify with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PhoneNotify) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PhoneNotify with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PhoneNotifyMultiError, or
// nil if none found.
func (m *PhoneNotify) ValidateAll() error {
	return m.validate(true)
}

func (m *PhoneNotify) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetBody()) < 1 {
		err := PhoneNotifyValidationError{
			field:  "Body",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PhoneNotifyMultiError(errors)
	}

	return nil
}

// PhoneNotifyMultiError is an error wrapping multiple validation errors
// returned by PhoneNotify.ValidateAll() if the designated constraints aren't met.
type PhoneNotifyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PhoneNotifyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PhoneNotifyMultiError) AllErrors() []error { return m }

// PhoneNotifyValidationError is the validation error returned by
// PhoneNotify.Validate if the designated constraints aren't met.
type PhoneNotifyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PhoneNotifyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PhoneNotifyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PhoneNotifyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PhoneNotifyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PhoneNotifyValidationError) ErrorName() string { return "PhoneNotifyValidationError" }

// Error satisfies the builtin error interface
func (e PhoneNotifyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPhoneNotify.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PhoneNotifyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PhoneNotifyValidationError{}

// Validate checks the field values on Channels with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Channels) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Channels with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ChannelsMultiError, or nil
// if none found.
func (m *Channels) ValidateAll() error {
	return m.validate(true)
}

func (m *Channels) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Mail != nil {

		if all {
			switch v := interface{}(m.GetMail()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChannelsValidationError{
						field:  "Mail",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChannelsValidationError{
						field:  "Mail",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMail()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChannelsValidationError{
					field:  "Mail",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Phone != nil {

		if all {
			switch v := interface{}(m.GetPhone()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ChannelsValidationError{
						field:  "Phone",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ChannelsValidationError{
						field:  "Phone",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPhone()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ChannelsValidationError{
					field:  "Phone",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ChannelsMultiError(errors)
	}

	return nil
}

// ChannelsMultiError is an error wrapping multiple validation errors returned
// by Channels.ValidateAll() if the designated constraints aren't met.
type ChannelsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChannelsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChannelsMultiError) AllErrors() []error { return m }

// ChannelsValidationError is the validation error returned by
// Channels.Validate if the designated constraints aren't met.
type ChannelsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChannelsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChannelsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChannelsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChannelsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChannelsValidationError) ErrorName() string { return "ChannelsValidationError" }

// Error satisfies the builtin error interface
func (e ChannelsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChannels.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChannelsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChannelsValidationError{}

// Validate checks the field values on SendMessageReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendMessageReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendMessageReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendMessageReqMultiError,
// or nil if none found.
func (m *SendMessageReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SendMessageReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserID()) < 1 {
		err := SendMessageReqValidationError{
			field:  "UserID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_SendMessageReq_UserID_Pattern.MatchString(m.GetUserID()) {
		err := SendMessageReqValidationError{
			field:  "UserID",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetChannels() == nil {
		err := SendMessageReqValidationError{
			field:  "Channels",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetChannels()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendMessageReqValidationError{
					field:  "Channels",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendMessageReqValidationError{
					field:  "Channels",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChannels()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendMessageReqValidationError{
				field:  "Channels",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SendMessageReqMultiError(errors)
	}

	return nil
}

// SendMessageReqMultiError is an error wrapping multiple validation errors
// returned by SendMessageReq.ValidateAll() if the designated constraints
// aren't met.
type SendMessageReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendMessageReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendMessageReqMultiError) AllErrors() []error { return m }

// SendMessageReqValidationError is the validation error returned by
// SendMessageReq.Validate if the designated constraints aren't met.
type SendMessageReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMessageReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMessageReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMessageReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMessageReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMessageReqValidationError) ErrorName() string { return "SendMessageReqValidationError" }

// Error satisfies the builtin error interface
func (e SendMessageReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMessageReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMessageReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMessageReqValidationError{}

var _SendMessageReq_UserID_Pattern = regexp.MustCompile("^[a-zA-Z0-9_-]+$")

// Validate checks the field values on SendMessageResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SendMessageResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendMessageResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SendMessageRespMultiError, or nil if none found.
func (m *SendMessageResp) ValidateAll() error {
	return m.validate(true)
}

func (m *SendMessageResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Respond

	if len(errors) > 0 {
		return SendMessageRespMultiError(errors)
	}

	return nil
}

// SendMessageRespMultiError is an error wrapping multiple validation errors
// returned by SendMessageResp.ValidateAll() if the designated constraints
// aren't met.
type SendMessageRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendMessageRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendMessageRespMultiError) AllErrors() []error { return m }

// SendMessageRespValidationError is the validation error returned by
// SendMessageResp.Validate if the designated constraints aren't met.
type SendMessageRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMessageRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMessageRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMessageRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMessageRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMessageRespValidationError) ErrorName() string { return "SendMessageRespValidationError" }

// Error satisfies the builtin error interface
func (e SendMessageRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMessageResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMessageRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMessageRespValidationError{}

// Validate checks the field values on Preferences with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Preferences) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Preferences with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PreferencesMultiError, or
// nil if none found.
func (m *Preferences) ValidateAll() error {
	return m.validate(true)
}

func (m *Preferences) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Mail != nil {

		if all {
			switch v := interface{}(m.GetMail()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PreferencesValidationError{
						field:  "Mail",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PreferencesValidationError{
						field:  "Mail",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMail()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PreferencesValidationError{
					field:  "Mail",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if m.Phone != nil {

		if all {
			switch v := interface{}(m.GetPhone()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PreferencesValidationError{
						field:  "Phone",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PreferencesValidationError{
						field:  "Phone",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPhone()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PreferencesValidationError{
					field:  "Phone",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PreferencesMultiError(errors)
	}

	return nil
}

// PreferencesMultiError is an error wrapping multiple validation errors
// returned by Preferences.ValidateAll() if the designated constraints aren't met.
type PreferencesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PreferencesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PreferencesMultiError) AllErrors() []error { return m }

// PreferencesValidationError is the validation error returned by
// Preferences.Validate if the designated constraints aren't met.
type PreferencesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PreferencesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PreferencesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PreferencesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PreferencesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PreferencesValidationError) ErrorName() string { return "PreferencesValidationError" }

// Error satisfies the builtin error interface
func (e PreferencesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPreferences.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PreferencesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PreferencesValidationError{}

// Validate checks the field values on AddUserReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddUserReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddUserReqMultiError, or
// nil if none found.
func (m *AddUserReq) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUsername()) < 1 {
		err := AddUserReqValidationError{
			field:  "Username",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AddUserReq_Username_Pattern.MatchString(m.GetUsername()) {
		err := AddUserReqValidationError{
			field:  "Username",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetEmail()) < 1 {
		err := AddUserReqValidationError{
			field:  "Email",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AddUserReq_Email_Pattern.MatchString(m.GetEmail()) {
		err := AddUserReqValidationError{
			field:  "Email",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPhone()) < 1 {
		err := AddUserReqValidationError{
			field:  "Phone",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AddUserReq_Phone_Pattern.MatchString(m.GetPhone()) {
		err := AddUserReqValidationError{
			field:  "Phone",
			reason: "value does not match regex pattern \"^[+]?[0-9]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPassword()) < 8 {
		err := AddUserReqValidationError{
			field:  "Password",
			reason: "value length must be at least 8 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_AddUserReq_Password_Pattern.MatchString(m.GetPassword()) {
		err := AddUserReqValidationError{
			field:  "Password",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Preferences != nil {

		if all {
			switch v := interface{}(m.GetPreferences()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddUserReqValidationError{
						field:  "Preferences",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddUserReqValidationError{
						field:  "Preferences",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetPreferences()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddUserReqValidationError{
					field:  "Preferences",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AddUserReqMultiError(errors)
	}

	return nil
}

// AddUserReqMultiError is an error wrapping multiple validation errors
// returned by AddUserReq.ValidateAll() if the designated constraints aren't met.
type AddUserReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserReqMultiError) AllErrors() []error { return m }

// AddUserReqValidationError is the validation error returned by
// AddUserReq.Validate if the designated constraints aren't met.
type AddUserReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserReqValidationError) ErrorName() string { return "AddUserReqValidationError" }

// Error satisfies the builtin error interface
func (e AddUserReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserReqValidationError{}

var _AddUserReq_Username_Pattern = regexp.MustCompile("^[a-zA-Z0-9_-]+$")

var _AddUserReq_Email_Pattern = regexp.MustCompile("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$")

var _AddUserReq_Phone_Pattern = regexp.MustCompile("^[+]?[0-9]+$")

var _AddUserReq_Password_Pattern = regexp.MustCompile("^[a-zA-Z0-9_-]+$")

// Validate checks the field values on AddUserResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AddUserResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddUserResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AddUserRespMultiError, or
// nil if none found.
func (m *AddUserResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AddUserResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Username

	// no validation rules for Email

	// no validation rules for Phone

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddUserRespValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddUserRespValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddUserRespValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddUserRespMultiError(errors)
	}

	return nil
}

// AddUserRespMultiError is an error wrapping multiple validation errors
// returned by AddUserResp.ValidateAll() if the designated constraints aren't met.
type AddUserRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddUserRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddUserRespMultiError) AllErrors() []error { return m }

// AddUserRespValidationError is the validation error returned by
// AddUserResp.Validate if the designated constraints aren't met.
type AddUserRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserRespValidationError) ErrorName() string { return "AddUserRespValidationError" }

// Error satisfies the builtin error interface
func (e AddUserRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserRespValidationError{}

// Validate checks the field values on MailApproval with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MailApproval) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MailApproval with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MailApprovalMultiError, or
// nil if none found.
func (m *MailApproval) ValidateAll() error {
	return m.validate(true)
}

func (m *MailApproval) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Approval

	if len(errors) > 0 {
		return MailApprovalMultiError(errors)
	}

	return nil
}

// MailApprovalMultiError is an error wrapping multiple validation errors
// returned by MailApproval.ValidateAll() if the designated constraints aren't met.
type MailApprovalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MailApprovalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MailApprovalMultiError) AllErrors() []error { return m }

// MailApprovalValidationError is the validation error returned by
// MailApproval.Validate if the designated constraints aren't met.
type MailApprovalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MailApprovalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MailApprovalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MailApprovalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MailApprovalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MailApprovalValidationError) ErrorName() string { return "MailApprovalValidationError" }

// Error satisfies the builtin error interface
func (e MailApprovalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMailApproval.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MailApprovalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MailApprovalValidationError{}

// Validate checks the field values on PhoneApproval with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PhoneApproval) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PhoneApproval with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PhoneApprovalMultiError, or
// nil if none found.
func (m *PhoneApproval) ValidateAll() error {
	return m.validate(true)
}

func (m *PhoneApproval) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Approval

	if len(errors) > 0 {
		return PhoneApprovalMultiError(errors)
	}

	return nil
}

// PhoneApprovalMultiError is an error wrapping multiple validation errors
// returned by PhoneApproval.ValidateAll() if the designated constraints
// aren't met.
type PhoneApprovalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PhoneApprovalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PhoneApprovalMultiError) AllErrors() []error { return m }

// PhoneApprovalValidationError is the validation error returned by
// PhoneApproval.Validate if the designated constraints aren't met.
type PhoneApprovalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PhoneApprovalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PhoneApprovalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PhoneApprovalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PhoneApprovalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PhoneApprovalValidationError) ErrorName() string { return "PhoneApprovalValidationError" }

// Error satisfies the builtin error interface
func (e PhoneApprovalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPhoneApproval.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PhoneApprovalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PhoneApprovalValidationError{}

// Validate checks the field values on EditPreferencesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditPreferencesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditPreferencesReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditPreferencesReqMultiError, or nil if none found.
func (m *EditPreferencesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *EditPreferencesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetUserID()) < 1 {
		err := EditPreferencesReqValidationError{
			field:  "UserID",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_EditPreferencesReq_UserID_Pattern.MatchString(m.GetUserID()) {
		err := EditPreferencesReqValidationError{
			field:  "UserID",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPreferences() == nil {
		err := EditPreferencesReqValidationError{
			field:  "Preferences",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetPreferences()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EditPreferencesReqValidationError{
					field:  "Preferences",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EditPreferencesReqValidationError{
					field:  "Preferences",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPreferences()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EditPreferencesReqValidationError{
				field:  "Preferences",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return EditPreferencesReqMultiError(errors)
	}

	return nil
}

// EditPreferencesReqMultiError is an error wrapping multiple validation errors
// returned by EditPreferencesReq.ValidateAll() if the designated constraints
// aren't met.
type EditPreferencesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditPreferencesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditPreferencesReqMultiError) AllErrors() []error { return m }

// EditPreferencesReqValidationError is the validation error returned by
// EditPreferencesReq.Validate if the designated constraints aren't met.
type EditPreferencesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditPreferencesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditPreferencesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditPreferencesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditPreferencesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditPreferencesReqValidationError) ErrorName() string {
	return "EditPreferencesReqValidationError"
}

// Error satisfies the builtin error interface
func (e EditPreferencesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditPreferencesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditPreferencesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditPreferencesReqValidationError{}

var _EditPreferencesReq_UserID_Pattern = regexp.MustCompile("^[a-zA-Z0-9_-]+$")

// Validate checks the field values on EditPreferencesResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EditPreferencesResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EditPreferencesResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EditPreferencesRespMultiError, or nil if none found.
func (m *EditPreferencesResp) ValidateAll() error {
	return m.validate(true)
}

func (m *EditPreferencesResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Respond

	if len(errors) > 0 {
		return EditPreferencesRespMultiError(errors)
	}

	return nil
}

// EditPreferencesRespMultiError is an error wrapping multiple validation
// errors returned by EditPreferencesResp.ValidateAll() if the designated
// constraints aren't met.
type EditPreferencesRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EditPreferencesRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EditPreferencesRespMultiError) AllErrors() []error { return m }

// EditPreferencesRespValidationError is the validation error returned by
// EditPreferencesResp.Validate if the designated constraints aren't met.
type EditPreferencesRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EditPreferencesRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EditPreferencesRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EditPreferencesRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EditPreferencesRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EditPreferencesRespValidationError) ErrorName() string {
	return "EditPreferencesRespValidationError"
}

// Error satisfies the builtin error interface
func (e EditPreferencesRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEditPreferencesResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EditPreferencesRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EditPreferencesRespValidationError{}
