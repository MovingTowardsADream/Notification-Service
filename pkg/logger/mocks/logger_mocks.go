// Code generated by MockGen. DO NOT EDIT.
// Source: logger.go

// Package mocks is a generated GoMock package.
package mocks

import (
	logger "Notification_Service/pkg/logger"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockManager) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockManagerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockManager)(nil).Close))
}

// MockHandlingLogger is a mock of HandlingLogger interface.
type MockHandlingLogger struct {
	ctrl     *gomock.Controller
	recorder *MockHandlingLoggerMockRecorder
}

// MockHandlingLoggerMockRecorder is the mock recorder for MockHandlingLogger.
type MockHandlingLoggerMockRecorder struct {
	mock *MockHandlingLogger
}

// NewMockHandlingLogger creates a new mock instance.
func NewMockHandlingLogger(ctrl *gomock.Controller) *MockHandlingLogger {
	mock := &MockHandlingLogger{ctrl: ctrl}
	mock.recorder = &MockHandlingLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandlingLogger) EXPECT() *MockHandlingLoggerMockRecorder {
	return m.recorder
}

// Err mocks base method.
func (m *MockHandlingLogger) Err(err error) logger.Attr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err", err)
	ret0, _ := ret[0].(logger.Attr)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockHandlingLoggerMockRecorder) Err(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockHandlingLogger)(nil).Err), err)
}

// MockDefaultLogger is a mock of DefaultLogger interface.
type MockDefaultLogger struct {
	ctrl     *gomock.Controller
	recorder *MockDefaultLoggerMockRecorder
}

// MockDefaultLoggerMockRecorder is the mock recorder for MockDefaultLogger.
type MockDefaultLoggerMockRecorder struct {
	mock *MockDefaultLogger
}

// NewMockDefaultLogger creates a new mock instance.
func NewMockDefaultLogger(ctrl *gomock.Controller) *MockDefaultLogger {
	mock := &MockDefaultLogger{ctrl: ctrl}
	mock.recorder = &MockDefaultLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDefaultLogger) EXPECT() *MockDefaultLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockDefaultLogger) Debug(msg string, attrs ...logger.Attr) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range attrs {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockDefaultLoggerMockRecorder) Debug(msg interface{}, attrs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, attrs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockDefaultLogger)(nil).Debug), varargs...)
}

// Error mocks base method.
func (m *MockDefaultLogger) Error(msg string, attrs ...logger.Attr) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range attrs {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockDefaultLoggerMockRecorder) Error(msg interface{}, attrs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, attrs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockDefaultLogger)(nil).Error), varargs...)
}

// Info mocks base method.
func (m *MockDefaultLogger) Info(msg string, attrs ...logger.Attr) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range attrs {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockDefaultLoggerMockRecorder) Info(msg interface{}, attrs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, attrs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockDefaultLogger)(nil).Info), varargs...)
}

// Warn mocks base method.
func (m *MockDefaultLogger) Warn(msg string, attrs ...logger.Attr) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range attrs {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockDefaultLoggerMockRecorder) Warn(msg interface{}, attrs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, attrs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockDefaultLogger)(nil).Warn), varargs...)
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockLogger) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockLoggerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLogger)(nil).Close))
}

// Debug mocks base method.
func (m *MockLogger) Debug(msg string, attrs ...logger.Attr) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range attrs {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debug", varargs...)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(msg interface{}, attrs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, attrs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), varargs...)
}

// Err mocks base method.
func (m *MockLogger) Err(err error) logger.Attr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err", err)
	ret0, _ := ret[0].(logger.Attr)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockLoggerMockRecorder) Err(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockLogger)(nil).Err), err)
}

// Error mocks base method.
func (m *MockLogger) Error(msg string, attrs ...logger.Attr) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range attrs {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(msg interface{}, attrs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, attrs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), varargs...)
}

// Info mocks base method.
func (m *MockLogger) Info(msg string, attrs ...logger.Attr) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range attrs {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(msg interface{}, attrs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, attrs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), varargs...)
}

// Warn mocks base method.
func (m *MockLogger) Warn(msg string, attrs ...logger.Attr) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range attrs {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warn", varargs...)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerMockRecorder) Warn(msg interface{}, attrs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, attrs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn), varargs...)
}
